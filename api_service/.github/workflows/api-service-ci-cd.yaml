# ##############################################################################
# .github/workflows/api-service-ci-cd.yaml                                     #
#                                                                              #
# This workflow defines the CI/CD pipeline for the CSecBridge API Service.     #
# It automates linting, building, and deploying to dev and prod environments.  #
# ##############################################################################

name: Github Actions CI-CD for CSecBridge API Service

# Workflow Concurrency Control
# Scoped to the specific branch (ref). Ensures a single active workflow per branch.
# For PROD, workflow will be queued. For DEV, workflow will be replaced.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

# Workflow Triggers
# This workflow runs automatically on every push to the 'main' or 'dev' branch.
on:
  push:
    branches:
      - main
      - dev
  # Allows manual triggering (only enabled for DEV)
  workflow_dispatch:

# Environment variables for the workflow
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/csecbridge-api-service

jobs:
  #########################################
  # JOB 1: Lint and Build the Source Code #
  #########################################

  lint-and-build:
    name: Lint and Build Image
    runs-on: ubuntu-latest
    outputs:
      image_full_name: ${{ steps.build_push.outputs.tags }}
    steps:
      # STEP 1: Checkout Repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 2: Python Setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # STEP 3: Install Flake8
      - name: Install dependencies for linting
        run: pip install flake8

      # STEP 4: Run Flake8
      - name: Run linter
        run: flake8 api_service/source/

      # PLACEHOLDER - To upload linting logs to artifactory

      # STEP 5: Build and Push Docker Image to Container Registry
      - name: Build and Push Docker Image
        id: build_push
        uses: ./.github/actions/build-docker-image/
        with:
          registry_username: ${{ github.repository_owner }}
          registry_password: ${{ secrets.GH_PAT }}
          image_name: ${{ env.IMAGE_NAME }}
          dockerfile_context: ./api_service
          git_ref_name: ${{ github.ref_name }}

  ################################
  # JOB 2: Deploy to Development #
  ################################

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: lint-and-build # This job runs only after 'lint-and-build' succeeds

    steps:
      # STEP 1: Checkout Repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 2: Setup Kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      # STEP 3: Configure Kubectl (Default config for platform)
      - name: Configure kubectl for dev cluster
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA_DEV }}" | base64 -d > ~/.kube/config

      # STEP 4: Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3

      # STEP 5: Create Namespace and RBAC
      - name: Ensure dev namespace and RBAC
        run: kubectl apply -k api_service/platform-config/overlays/dev

      # STEP 6: Create Dev Secrets
      - name: Create DEV Secrets
        uses: ./.github/actions/create-kube-secrets
        with:
          api_token: ${{ secrets.DEV_API_TOKEN }}
          db_password: ${{ secrets.DEV_DB_PASSWORD }}
          redis_password: ${{ secrets.DEV_REDIS_PASSWORD }}
          namespace: csecbridge-prod

      # STEP 7: Install Helm Chart
      - name: Deploy to Dev with Helm
        uses: ./.github/actions/helm-deploy
        with:
          release_name: api-service-dev
          namespace: csecbridge-dev
          chart_path: ./api_service/helm
          image_full_name: ${{ needs.lint-and-build.outputs.image_full_name }}
          # Overrides the default values set in helm configuration
          values_overrides: >-
            --set ingress.enabled=true
            --set secrets.apiToken.create=false
            --set secrets.postgres.create=false
            --set secrets.redis.create=false

  ###############################
  # JOB 3: Deploy to Production #
  ###############################
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev # Runs only after the 'dev' deployment is successful

    # Important: Allows deployment to prod via pipeline only
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # Manual Approval
    environment:
      name: production
      url: https://api.csecbridge.com

    steps:
      # STEP 1: Checkout Repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 2: Setup Kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      # STEP 3: Configure Kubectl (Default config for platform)
      - name: Configure kubectl for prod cluster
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_INIT_CONFIG_DATA }}" | base64 -d > ~/.kube/config

      # STEP 4: Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3

      # STEP 5: Create Namespace, Service Account and RBAC
      - name: Ensure prod namespace and RBAC
        run: kubectl apply -k api_service/platform-config/overlays/prod

      # STEP 6: Create Production Secrets
      - name: Create Production Secrets
        uses: ./.github/actions/create-kube-secrets
        with:
          api_token: ${{ secrets.PROD_API_TOKEN }}
          db_password: ${{ secrets.PROD_DB_PASSWORD }}
          redis_password: ${{ secrets.PROD_REDIS_PASSWORD }}
          namespace: csecbridge-prod

      # STEP 7: Install Helm Chart
      - name: Deploy to prod with Helm
        uses: ./.github/actions/helm-deploy
        with:
          release_name: api-service-prod
          namespace: csecbridge-prod
          chart_path: ./api_service/helm
          image_full_name: ${{ needs.lint-and-build.outputs.image_full_name }}
          # Overrides the default values set in helm configuration
          values_overrides: >-
            --set ingress.enabled=true
            --set secrets.apiToken.create=false
            --set secrets.postgres.create=false
            --set secrets.redis.create=false
