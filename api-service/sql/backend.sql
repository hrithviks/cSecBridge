/* ----------------------------------------------------------------------------
* Create backend objects for API-Service.
*
* 1. REQUESTS - Main table for maintaining the current state of a request.
* 2. REQUESTS_AUDIT - Audit table for logging all the events.
* 3. Set owner for the tables
* 4. Set meta data for tables and columns
* 5. Create Indices for the tables.
* 6. Set permissions for API User on the tables for absolute necessary actions.
* 7. Create policies for row-level security on the tables.
*
* NOTE: Objects will be created using the application schema - CSB_APP
* 
*/ ----------------------------------------------------------------------------

create type status_enum as enum ('pending', 'success', 'failed', 'rollback', 'queued', 'in-progress');

create table csb_app.csb_requests (
    correlation_id uuid primary key,
    client_req_id varchar(255) not null,
    status status_enum not null,
    req_time_stamp timestamptz not null default now(),
    last_upd_time_stamp timestamptz,
    cloud_provider varchar(50) not null,
    principal varchar(255) not null,
    action varchar(50) not null,
    role varchar(255) not null,
    account_id varchar(255)
);

create table csb_app.csb_requests_audit (
    audit_id bigserial primary key,
    correlation_id uuid not null references csb_requests(correlation_id) on delete cascade,
    status status_enum not null,
    audit_timestamp timestamptz not null default now(),
    error_text text
);

-- Set the column meta data
comment on column csb_requests.correlation_id is 'Unique id generated by the api service for internal tracking.';
comment on column csb_requests.status is 'The current status of the request (e.g., pending, success, failed).';
comment on table csb_requests is 'Primary table for maintaining state of each request.';
comment on table csb_requests_audit is 'An append-only log of all status changes for each request.';

-- Create indices
create index csb_requests_client_request_id_idx on csb_requests(client_req_id);
create index csb_requests_status_idx on csb_requests(status);
create index csb_requests_principal_idx on csb_requests(principal);
create index csb_requests_audit_correlation_id_idx on csb_requests_audit(correlation_id);

-- Grant permisions for service level user.
grant select, insert, update on table csb_requests to csb_api_user;
grant select, insert on table csb_requests_audit to csb_api_user;

-- The audit_id is auto-generating, so the user needs usage permission on the sequence.
grant usage, select on sequence csb_requests_audit_audit_id_seq to csb_api_user;

-- Row level security policies
alter table csb_app.csb_requests enable row level security;

create policy csb_aws_worker_policy on csb_app.csb_requests for select, update to csb_aws_user using (cloud_provider = 'aws');
create policy csb_azure_worker_policy on csb_app.csb_requests for select, update to csb_azure_user using (cloud_provider = 'azure');

/*
Place-holder for additional row-level security policy,
to control inserts into audit table for respective worker processes.

E.g. AWS user should insert into audit, 
if and only if the correlation id existing in the requests table, 
corresponds to the scope of the provider.
*/

-- Grant access to AWS Worker user.
grant select, insert, update on table csb_requests to csb_aws_user;
grant select, insert on table csb_requests_audit to csb_aws_user;

-- Grant access to Azure Worker user.
grant select, update on table csb_requests to csb_azure_user;
grant select, insert on table csb_requests_audit to csb_azure_user;